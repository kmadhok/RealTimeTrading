# -*- coding: utf-8 -*-
"""Data Load and Clean - BTC + Twitter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UmAqCdIS2KT4vxCJuJkk_v3h6iF3ILf3
"""

# !pip install alpaca-trade-api
# !pip install alpaca
# !pip install alpaca-py

import pandas as pd

pd.options.mode.chained_assignment = None  # default='warn'

from datetime import datetime
from configparser import ConfigParser
from alpaca.data.timeframe import TimeFrame
from alpaca.data.requests import CryptoBarsRequest
from alpaca.data.requests import CryptoTradesRequest
from alpaca.data.requests import CryptoSnapshotRequest
from alpaca.data.requests import CryptoLatestOrderbookRequest
from alpaca.data.historical import CryptoHistoricalDataClient

# Initialize the Parser.
config = ConfigParser()

# Read the file.
config.read('.config/config.ini')

# Get the specified credentials.
api_key = 'AK8O18GBTJC8LFF5WSXW'
secret_key = '5zyGVsRKxJiPSnYDxFIFrSABOFjegDwhVG3WT0bb'

# Initialize the CryptoHistoricalDataClient.
crypto_data_client = CryptoHistoricalDataClient(
    api_key=api_key,
    secret_key=secret_key
)

# Now let's define a request using the CryptoBarsRequest class.
# Limit the number of bars to 1000 and set the timeframe to 1 hour.
request = CryptoBarsRequest(
    symbol_or_symbols=['BTC/USD'],
    start=datetime(year=2021, month=1, day=1).date(),
    end=datetime(year=2023, month=1, day=9).date(),
    timeframe=TimeFrame.Day,
    limit=1000
)

# Now let's get the data.
bar_data = crypto_data_client.get_crypto_bars(request_params=request)

# bar_data.df

# save as a DF object
df_btc = bar_data.df

# reset index and convert to date
df_btc.reset_index(inplace=True)
df_btc.set_index('timestamp', inplace=True)
df_btc.index = pd.to_datetime(df_btc.index).date

# Twitter data added to backtest the strategy - will combine this with the moving average dataframes
df_sentiment = pd.read_csv('df_sentiment_by_day.csv')

# convert sentiments to date converted to date
df_sentiment['date'] = pd.to_datetime(df_sentiment['day'])
df_sentiment.set_index('date', inplace=True)

# Now merge the data signals in case helpful
df_btc_merged = df_btc.merge(df_sentiment[['strong_positive']], left_index=True, right_index=True, how='left')

df_btc_merged_cleaned = df_btc_merged.dropna()

print(df_btc_merged_cleaned.head(5))

df_btc_merged_cleaned.to_csv('trade_data.csv', index=False)
df_btc.to_csv('bitcoin_data.csv', index=False)
